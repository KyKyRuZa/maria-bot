# handlers.py
import logging
from typing import Dict, Any
import os
from dotenv import load_dotenv
from aiogram import F
from aiogram.filters import Command, StateFilter
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

load_dotenv()

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ ---
from config import dp

from data import (
    WELCOME_MESSAGE,
    MEDICAL_REQUIREMENTS,
    ADULT_SCHEDULE,
    CHILD_SCHEDULE,
    format_pricelist_for_adults,
    format_pricelist_for_children,
    CONTACTS_TEXT,
    COACHES_TEXT
)

from keyboards import (
    get_main_keyboard,
    get_role_keyboard,
    get_adult_schedule_keyboard,
    get_child_pool_keyboard,
    get_child_schedule_keyboard,
    get_admin_keyboard,
    get_edit_price_category_keyboard,
    get_adult_pool_keyboard
)

from database import (
    get_all_registrations,
    get_user_registration,
    save_user,
    get_user_role,
    get_user_stats,
    get_all_users,
    get_financial_report,
    load_prices,
    update_price,
    create_pool,
    save_registration
)

logger = logging.getLogger(__name__)

# üîê –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID
ADMIN_ID = int(os.getenv("ADMIN_ID")) # üî• –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID!

# --- –°–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ ---
SERVICE_TYPE_RU: Dict[str, str] = {
    "group": "–ì—Ä—É–ø–ø–æ–≤—ã–µ",
    "personal": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ",
    "split": "–°–ø–ª–∏—Ç-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
    "mini_group": "–ú–∏–Ω–∏-–≥—Ä—É–ø–ø—ã"
}

CATEGORY_RU: Dict[str, str] = {
    "adult": "–í–∑—Ä–æ—Å–ª—ã–µ",
    "child": "–î–µ—Ç–∏"
}

# --- –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —Å–ª–æ—Ç—ã ---
TRAINING_TIME_RU: Dict[str, str] = {
    # –í–∑—Ä–æ—Å–ª—ã–µ
    "adult_admiralteysky_mf_2000": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ –ü—è—Ç–Ω–∏—Ü–∞, 20:00 (–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π)",
    "adult_dvvs_wed_2015": "–°—Ä–µ–¥–∞, 20:15 (–î–í–í–°)",
    # –î–µ—Ç–∏ - –ê-–§–∏—Ç–Ω–µ—Å
    "child_a_fitnes_tt_1545": "–í—Ç–æ—Ä–Ω–∏–∫ –∏ –ß–µ—Ç–≤–µ—Ä–≥, 15:45 (–ê-–§–∏—Ç–Ω–µ—Å)",
    "child_a_fitnes_sa_1415": "–°—É–±–±–æ—Ç–∞, 14:15 (–ê-–§–∏—Ç–Ω–µ—Å)",
    "child_a_fitnes_sa_1500": "–°—É–±–±–æ—Ç–∞, 15:00 (–ê-–§–∏—Ç–Ω–µ—Å)",
    "child_a_fitnes_mf_1500": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ –ü—è—Ç–Ω–∏—Ü–∞, 15:00 (–ê-–§–∏—Ç–Ω–µ—Å)",
    "child_a_fitnes_mf_1545": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ –ü—è—Ç–Ω–∏—Ü–∞, 15:45 (–ê-–§–∏—Ç–Ω–µ—Å)",
    "child_a_fitnes_wed_1500": "–°—Ä–µ–¥–∞, 15:00 (–ê-–§–∏—Ç–Ω–µ—Å)",
    "child_a_fitnes_wed_1545": "–°—Ä–µ–¥–∞, 15:45 (–ê-–§–∏—Ç–Ω–µ—Å)",
    "child_a_fitnes_mf_0945": "–í—Ç–æ—Ä–Ω–∏–∫ –∏ –ü—è—Ç–Ω–∏—Ü–∞, 9:45 (–ê-–§–∏—Ç–Ω–µ—Å)",
    # –ú–∏–Ω–∏-–≥—Ä—É–ø–ø—ã –ê-–§–∏—Ç–Ω–µ—Å
    "child_mini_a_fitnes_tt_1630": "–í—Ç–æ—Ä–Ω–∏–∫ –∏ –ß–µ—Ç–≤–µ—Ä–≥, 16:30 (–ê-–§–∏—Ç–Ω–µ—Å)",
    "child_mini_a_fitnes_tt_2015": "–í—Ç–æ—Ä–Ω–∏–∫ –∏ –ß–µ—Ç–≤–µ—Ä–≥, 20:15 (–ê-–§–∏—Ç–Ω–µ—Å)",
    "child_mini_a_fitnes_mf_2015": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ –ü—è—Ç–Ω–∏—Ü–∞, 20:15 (–ê-–§–∏—Ç–Ω–µ—Å)",
    "child_mini_a_fitnes_wed_2015": "–°—Ä–µ–¥–∞, 20:15 (–ê-–§–∏—Ç–Ω–µ—Å)",
    # –î–µ—Ç–∏ - –î–í–í–°
    "child_dvvs_wed_1845": "–°—Ä–µ–¥–∞, 18:45 (–î–í–í–°)",
    "child_dvvs_wed_1930": "–°—Ä–µ–¥–∞, 19:30 (–î–í–í–°)",
    "child_dvvs_wed_2015": "–°—Ä–µ–¥–∞, 20:15 (–î–í–í–°)",
}

TRAINING_SLOTS = set(TRAINING_TIME_RU.keys())

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class RegistrationStates:
    waiting_for_full_name: str = "waiting_for_full_name"
    waiting_for_age: str = "waiting_for_age"
    waiting_for_role: str = "waiting_for_role"
    waiting_for_phone: str = "waiting_for_phone"

class PriceEditStates:
    waiting_for_price: str = "waiting_for_price"

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext) -> None:
    user = message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª /start")

    role = await get_user_role(user.id)
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ä–æ–ª—å –∏–∑ –ë–î: {role}")  # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞

    is_registered = role is not None

    welcome_text = WELCOME_MESSAGE
    if role:
        welcome_text += f"\n\nüîπ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫: <b>{role}</b>"

    await message.answer(
        welcome_text,
        reply_markup=get_main_keyboard(is_registered=is_registered),
        parse_mode="HTML"
    )
    await state.clear()

@dp.message(Command("admin"))
async def admin_panel(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    await message.answer("üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_keyboard())

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
@dp.callback_query(F.data == "start_registration")
async def start_registration(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ:")
    await state.set_state(RegistrationStates.waiting_for_full_name)
    await callback.answer()

@dp.message(F.text, StateFilter(RegistrationStates.waiting_for_full_name))
async def process_full_name(message: Message, state: FSMContext) -> None:
    full_name = message.text.strip()
    if len(full_name.split()) < 2:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á).")
        return
    await state.update_data(full_name=full_name)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(RegistrationStates.waiting_for_age)

@dp.message(F.text, StateFilter(RegistrationStates.waiting_for_age))
async def process_age(message: Message, state: FSMContext) -> None:
    age_text = message.text.strip()
    if not age_text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return
    age = int(age_text)
    if age < 1 or age > 120:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1‚Äì120).")
        return
    await state.update_data(age=age)
    await message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=get_role_keyboard())
    await state.set_state(RegistrationStates.waiting_for_role)

@dp.callback_query(F.data.startswith("role_"), StateFilter(RegistrationStates.waiting_for_role))
async def process_role(callback: CallbackQuery, state: FSMContext) -> None:
    role = "–í–∑—Ä–æ—Å–ª—ã–π" if callback.data == "role_adult" else "–†–µ–±—ë–Ω–æ–∫"
    await state.update_data(role=role)
    await callback.message.edit_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(RegistrationStates.waiting_for_phone)
    await callback.answer()

@dp.message(F.text, StateFilter(RegistrationStates.waiting_for_phone))
async def process_phone(message: Message, state: FSMContext) -> None:
    phone = message.text.strip()
    digits = ''.join(filter(str.isdigit, phone))
    if len(digits) < 10:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    await state.update_data(phone=phone)
    data = await state.get_data()

    # üîç –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞—ë–º
    logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data}")

    await save_user(
        user_id=message.from_user.id,
        full_name=data['full_name'],
        age=data['age'],
        role=data['role'],  # ‚úÖ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å
        phone=phone
    )

    success_text = (
        f"üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üë§ <b>–§–ò–û:</b> {data['full_name']}\n"
        f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {data['age']}\n"
        f"üÜî <b>–†–æ–ª—å:</b> {data['role']}\n"  # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–æ–ª—å
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É."
    )
    await message.answer(
        success_text,
        reply_markup=get_main_keyboard(is_registered=True),
        parse_mode="HTML"
    )
    await state.clear()

# --- –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ---
@dp.callback_query(F.data == "show_profile")
async def show_profile(callback: CallbackQuery, state: FSMContext) -> None:
    role = await get_user_role(callback.from_user.id)
    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å. –†–æ–ª—å: {role}")  # ‚úÖ –õ–æ–≥

    if not role:
        await callback.message.edit_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
            reply_markup=get_main_keyboard(is_registered=False)
        )
        await callback.answer()
        return

    pool = await create_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT full_name, age, phone FROM users WHERE user_id = $1", callback.from_user.id)
    await pool.close()

    if not row:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.")
        await callback.answer()
        return

    phone = row['phone'] or "–Ω–µ —É–∫–∞–∑–∞–Ω"

    profile_text = (
        "üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üìå <b>–§–ò–û:</b> {row['full_name']}\n"
        f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {row['age']}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"üéØ <b>–†–æ–ª—å:</b> {role}\n\n"  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å
        "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —à–∫–æ–ª–µ –ø–ª–∞–≤–∞–Ω–∏—è <b>mariaswimpro</b>!"
    )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    markup = builder.as_markup()

    await callback.message.edit_text(profile_text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

# --- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ---
@dp.callback_query(F.data == "show_schedule")
async def show_schedule(callback: CallbackQuery, state: FSMContext) -> None:
    role = await get_user_role(callback.from_user.id)
    if not role:
        await callback.message.edit_text("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await callback.answer()
        return
    text = ADULT_SCHEDULE if role == "–í–∑—Ä–æ—Å–ª—ã–π" else CHILD_SCHEDULE

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    markup = builder.as_markup()

    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

# --- –ü—Ä–∞–π—Å-–ª–∏—Å—Ç ---
@dp.callback_query(F.data == "show_pricelist")
async def show_pricelist(callback: CallbackQuery, state: FSMContext) -> None:
    role = await get_user_role(callback.from_user.id)
    if not role:
        await callback.message.edit_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        await callback.answer()
        return

    text = await format_pricelist_for_children() if role == "–†–µ–±—ë–Ω–æ–∫" else await format_pricelist_for_adults()

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    markup = builder.as_markup()

    await callback.message.edit_text(text, reply_markup=markup)
    await callback.answer()

# --- –°–ø—Ä–∞–≤–∫–∏ ---
@dp.callback_query(F.data == "show_requirements")
async def show_requirements(callback: CallbackQuery) -> None:
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    markup = builder.as_markup()

    await callback.message.edit_text(MEDICAL_REQUIREMENTS, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

# --- –ê–¥—Ä–µ—Å–∞ ---
@dp.callback_query(F.data == "show_contacts")
async def show_addresses(callback: CallbackQuery) -> None:
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    markup = builder.as_markup()

    await callback.message.edit_text(CONTACTS_TEXT, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

# --- –¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ ---
@dp.callback_query(F.data == "show_coaches")
async def show_coaches(callback: CallbackQuery) -> None:
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    markup = builder.as_markup()

    await callback.message.edit_text(COACHES_TEXT, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

# --- –ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ---
@dp.callback_query(F.data == "register_training")
async def choose_training(callback: CallbackQuery, state: FSMContext) -> None:
    role = await get_user_role(callback.from_user.id)
    if not role:
        await callback.message.edit_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await callback.answer()
        return

    if role == "–í–∑—Ä–æ—Å–ª—ã–π":
        text = "üèä‚Äç‚ôÇÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Å—Å–µ–π–Ω –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö</b>"
        keyboard = get_adult_pool_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        text = "üßí <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Å—Å–µ–π–Ω –¥–ª—è –¥–µ—Ç–µ–π</b>"
        keyboard = get_child_pool_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state("choosing_pool")

    await callback.answer()

# --- –í—ã–±–æ—Ä –±–∞—Å—Å–µ–π–Ω–∞ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö ---
@dp.callback_query(F.data.startswith("adult_pool_"))
async def choose_adult_pool(callback: CallbackQuery, state: FSMContext) -> None:
    pool_key = callback.data.replace("adult_pool_", "")  # admiralteysky –∏–ª–∏ dvvs
    await state.update_data(selected_pool=pool_key)
    keyboard = get_adult_schedule_keyboard(pool_key)
    pool_name = "–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π" if pool_key == "admiralteysky" else "–î–í–í–°"
    text = f"üèä‚Äç‚ôÇÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\nüìç –ë–∞—Å—Å–µ–π–Ω: {pool_name}"
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state("choosing_time")
    await callback.answer()

@dp.callback_query(F.data.startswith("pool_"))
async def choose_child_pool(callback: CallbackQuery, state: FSMContext) -> None:
    pool_key = callback.data.split("_", 1)[1]  # a_fitnes, dvvs
    await state.update_data(selected_pool=pool_key)
    keyboard = get_child_schedule_keyboard(pool_key)
    text = f"üßí <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\nüìç –ë–∞—Å—Å–µ–π–Ω: {pool_key.upper()}"
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state("choosing_time")
    await callback.answer()

# --- –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ ---
@dp.callback_query(F.data.in_(TRAINING_SLOTS))
async def show_price_options(callback: CallbackQuery, state: FSMContext):
    slot = callback.data
    time_text = TRAINING_TIME_RU.get(slot, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
    role = await get_user_role(callback.from_user.id)
    category = "adult" if role == "–í–∑—Ä–æ—Å–ª—ã–π" else "child"

    prices = await load_prices()
    prices = [p for p in prices if p['category'] == category]

    if not prices:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–π—Å.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ session_count –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    grouped = {}
    for p in prices:
        service_type = p['service_type']
        duration = p['duration'] or '45 –º–∏–Ω'
        key = f"{service_type}_{duration}"
        
        if key not in grouped:
            grouped[key] = {}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º session_count –∫–∞–∫ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        grouped[key][p['session_count']] = p

    builder = InlineKeyboardBuilder()
    for key, items_dict in grouped.items():
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è service_type –∏ duration
        first_item = next(iter(items_dict.values()))
        service_ru = SERVICE_TYPE_RU.get(first_item['service_type'], first_item['service_type'])
        duration = first_item['duration'] or '45 –º–∏–Ω'
        
        builder.row(InlineKeyboardButton(
            text=f"üìå {service_ru} ({duration})",
            callback_data="header"
        ))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –≤—ã–≤–æ–¥–∏–º –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        for session_count in sorted(items_dict.keys()):
            p = items_dict[session_count]
            word = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if p['session_count'] == 1 else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" if p['session_count'] in (2,3,4) else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
            builder.button(
                text=f"üéü {p['session_count']} {word} ‚Äî {p['price']} ‚ÇΩ",
                callback_data=f"price_{p['id']}"
            )
        builder.adjust(1)

    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="register_training"))
    await state.update_data(selected_time_slot=slot, selected_time_text=time_text)
    await callback.message.edit_text(
        f"üèä‚Äç‚ôÇÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç</b>\n\n‚è∞ <b>–í—Ä–µ–º—è:</b> {time_text}\nüéØ <b>–†–æ–ª—å:</b> {role}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π ---
@dp.callback_query(F.data.startswith("price_"))
async def finalize_registration(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if 'selected_time_slot' not in data or 'selected_time_text' not in data:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ —É—Ç–µ—Ä—è–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardBuilder().add(
                InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ).as_markup()
        )
        await state.clear()
        await callback.answer()
        return

    price_id = int(callback.data.split("_", 1)[1])
    slot = data['selected_time_slot']
    time_text = data['selected_time_text']
    user_id = callback.from_user.id

    # ‚úÖ –ë–µ—Ä—ë–º —Ä–æ–ª—å –∏–∑ state (–Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–ø–∏—Å–∏)
    role = data.get('role')  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å "–í–∑—Ä–æ—Å–ª—ã–π"
    if not role:
        role = await get_user_role(user_id)  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

    pool = await create_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT full_name FROM users WHERE user_id = $1", user_id)
        price_row = await conn.fetchrow("SELECT * FROM prices WHERE id = $1", price_id)
    await pool.close()

    if not row or not price_row:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        await callback.answer()
        return

    full_name = row['full_name']
    session_count = price_row['session_count']
    price = price_row['price']

    await save_registration(user_id, full_name, role, time_text, session_count, price)

    word = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if session_count == 1 else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" if session_count in (2,3,4) else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
    price_text = f"{price:,} ‚ÇΩ".replace(",", " ")
    success_text = (
        "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!</b>\n\n"
        f"üë§ <b>–§–ò–û:</b> {full_name}\n"
        f"üéØ <b>–†–æ–ª—å:</b> {role}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {time_text}\n"
        f"üéü <b>–ê–±–æ–Ω–µ–º–µ–Ω—Ç:</b> {session_count} {word}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_text}\n\n"
        "üìû –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: +7 917 899 5088"
    )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    markup = builder.as_markup()

    await callback.message.edit_text(success_text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()
    await state.clear()

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@dp.callback_query(F.data == "admin_stats")
async def show_stats(callback: CallbackQuery, state: FSMContext) -> None:
    stats = await get_user_stats()
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üë• –í—Å–µ–≥–æ: <b>{stats['total']}</b>\n"
        f"üèä‚Äç‚ôÇÔ∏è –í–∑—Ä–æ—Å–ª—ã—Ö: <b>{stats['adults']}</b>\n"
        f"üë∂ –î–µ—Ç–µ–π: <b>{stats['children']}</b>"
    )
    if callback.message.text != text:
        await callback.message.edit_text(text, reply_markup=get_admin_keyboard(), parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "admin_users")
async def show_all_users(callback: CallbackQuery, state: FSMContext) -> None:
    users = await get_all_users()
    if not users:
        text = "üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        text = "üìã <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        for u in users:
            phone = u['phone'] or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            text += (
                f"üë§ <b>{u['full_name']}</b>\n"
                f"üî¢ ID: <code>{u['user_id']}</code>\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {u['age']}\n"
                f"üéØ –†–æ–ª—å: {u['role']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üìÖ {u['registered_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
            )
    if callback.message.text != text:
        await callback.message.edit_text(text, reply_markup=get_admin_keyboard(), parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "admin_finances")
async def show_finances(callback: CallbackQuery, state: FSMContext) -> None:
    report = await get_financial_report()
    text = (
        "üíµ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üí∏ –û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>{report['total_revenue']} ‚ÇΩ</b>\n"
        f"üé´ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: <b>{report['active_subscriptions']}</b>\n\n"
        "‚ÑπÔ∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–ø–ª–∞—Ç–∞–º–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ."
    )
    if callback.message.text != text:
        await callback.message.edit_text(text, reply_markup=get_admin_keyboard(), parse_mode="HTML")
    await callback.answer()

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–π—Å–∞ ---
@dp.callback_query(F.data == "edit_price_menu")
async def edit_price_menu(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_edit_price_category_keyboard())
    await callback.answer()
    
    
@dp.callback_query(F.data == "show_my_registrations")
async def show_my_registrations(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id

    # üîÅ –ë–µ—Ä—ë–º —Ä–æ–ª—å –∏–∑ users, –∞ –Ω–µ –∏–∑ registrations
    current_role = await get_user_role(user_id)
    if not current_role:
        text = "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
        markup = get_main_keyboard(is_registered=False)
        await callback.message.edit_text(text, reply_markup=markup)
        await callback.answer()
        return

    # üîπ –ë–µ—Ä—ë–º –∑–∞–ø–∏—Å—å –∏–∑ registrations
    registration = await get_user_registration(user_id)

    if not registration:
        text = (
            "üì≠ <b>–í—ã –ø–æ–∫–∞ –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã.</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –∏ –∑–∞–Ω—è—Ç–∏–µ."
        )
    else:
        # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ä–æ–ª—å –∏–∑ users, –Ω–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ registrations
        time_text = registration['training_time']
        session_count = registration['session_count']
        price = registration['price']
        full_name = registration['full_name']

        word = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if session_count == 1 else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" if session_count in (2,3,4) else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
        price_text = f"{price:,} ‚ÇΩ".replace(",", " ")

        text = (
            "üìã <b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ <b>–§–ò–û:</b> {full_name}\n"
            f"üéØ <b>–†–æ–ª—å:</b> {current_role}\n"  # ‚úÖ –¢–æ–ª—å–∫–æ –∏–∑ users
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {time_text}\n"
            f"üéü <b>–ê–±–æ–Ω–µ–º–µ–Ω—Ç:</b> {session_count} {word}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_text}\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üèä‚Äç‚ôÇÔ∏è"
        )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    markup = builder.as_markup()

    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()


@dp.callback_query(F.data.startswith("edit_prices_"))
async def show_prices_to_edit(callback: CallbackQuery, state: FSMContext) -> None:
    category_key = "adult" if "adult" in callback.data else "child"
    category_name = CATEGORY_RU[category_key]

    prices = await load_prices()
    prices = [p for p in prices if p['category'] == category_key]

    if not prices:
        text = f"üì≠ –ù–µ—Ç —Ü–µ–Ω –¥–ª—è <b>{category_name}</b>."
    else:
        text = f"üîß <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω ‚Äî {category_name}</b>\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ service_type + duration + session_count
        unique_prices = {}
        for p in prices:
            key = f"{p['service_type']}_{p['duration'] or ''}_{p['session_count']}"
            unique_prices[key] = p

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ service_type –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        grouped = {}
        for p in unique_prices.values():
            service_ru = SERVICE_TYPE_RU.get(p['service_type'], p['service_type'])
            if service_ru not in grouped:
                grouped[service_ru] = []
            grouped[service_ru].append(p)

        for service_ru, items in grouped.items():
            text += f"üìå <b>{service_ru}</b>\n"
            for p in items:
                duration = f" ({p['duration']})" if p['duration'] else ""
                count = p['session_count']
                word = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if count == 1 else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" if count in (2,3,4) else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
                text += f"  ‚Ä¢ {count} {word}{duration} ‚Äî <b>{p['price']} ‚ÇΩ</b>\n"
            text += "\n"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    buttons = []
    unique_buttons = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
    
    for p in prices:
        key = f"{p['service_type']}_{p['duration'] or ''}_{p['session_count']}"
        if key not in unique_buttons:
            unique_buttons.add(key)
            
            duration_str = p['duration'] or ''
            callback_data = f"edit_price:{category_key}:{p['service_type']}:{duration_str}:{p['session_count']}"
            service_ru = SERVICE_TYPE_RU.get(p['service_type'], p['service_type'])
            
            duration_text = f" ({p['duration']})" if p['duration'] else ""
            count = p['session_count']
            word = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if count == 1 else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" if count in (2,3,4) else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
            
            buttons.append([
                InlineKeyboardButton(
                    text=f"‚úèÔ∏è {service_ru}{duration_text} - {count} {word}",
                    callback_data=callback_data
                )
            ])

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

async def get_current_price(category: str, service_type: str, duration: str, session_count: int) -> int:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """
    pool = await create_pool()
    async with pool.acquire() as conn:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏–µ duration
        clean_duration = duration if duration is not None else ''
        
        price = await conn.fetchval('''
            SELECT price FROM prices 
            WHERE category = $1 
            AND service_type = $2 
            AND COALESCE(duration, '') = COALESCE($3, '')
            AND session_count = $4
        ''', category, service_type, duration, session_count)
    
    await pool.close()
    return price if price is not None else 0

@dp.callback_query(F.data.startswith("edit_price:"))
async def prompt_new_price(callback: CallbackQuery, state: FSMContext) -> None:
    parts = callback.data.split(":", 5)
    if len(parts) != 5:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    _, category_key, service_type, duration_str, session_count_str = parts
    try:
        session_count = int(session_count_str)
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    duration = duration_str if duration_str else None

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    current_price = await get_current_price(category_key, service_type, duration, session_count)
    
    category_name = CATEGORY_RU[category_key]
    service_ru = SERVICE_TYPE_RU.get(service_type, service_type)
    duration_text = f" ({duration_str})" if duration_str else ""
    
    edit_text = (
        f"üîß <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã</b>\n\n"
        f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_name}</b>\n"
        f"üìã –£—Å–ª—É–≥–∞: <b>{service_ru}</b>\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{duration_text.strip() or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</b>\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{session_count}</b>\n"
        f"üí∞ –ù—ã–Ω–µ—à–Ω—è—è —Ü–µ–Ω–∞: <b>{current_price} ‚ÇΩ</b>\n\n"
        f"üíµ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:"
    ).replace(",", " ")

    await callback.message.edit_text(edit_text, parse_mode="HTML")
    await callback.answer()

    await state.update_data(
        edit_price_category=category_key,
        edit_price_service_type=service_type,
        edit_price_duration=duration,
        edit_price_session_count=session_count
    )

    await state.set_state(PriceEditStates.waiting_for_price)

@dp.message(F.text.isdigit(), StateFilter(PriceEditStates.waiting_for_price))
async def update_price_value(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    category = data['edit_price_category']
    service_type = data['edit_price_service_type']
    duration = data['edit_price_duration']
    session_count = data['edit_price_session_count']
    new_price = int(message.text)

    clean_duration = duration if duration is not None else ''

    await update_price(category, service_type, clean_duration, session_count, new_price)

    category_name = CATEGORY_RU[category]
    service_ru = SERVICE_TYPE_RU.get(service_type, service_type)

    await message.answer(
        f"‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
        f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
        f"üìã –£—Å–ª—É–≥–∞: {service_ru}\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {session_count}\n"
        f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{new_price:,} ‚ÇΩ</b>".replace(",", " "),
        parse_mode="HTML"
    )

    await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())
    await state.clear()

# --- –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã ---
@dp.callback_query(F.data == "show_certificates")
async def show_certificates(callback: CallbackQuery) -> None:
    text = (
        "üéÅ <b>–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç</b>\n\n"
        "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –±–ª–∏–∑–∫–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Ä–∞–¥–æ—Å—Ç—å –ø–ª–∞–≤–∞–Ω–∏—è?\n\n"
        "üìû <b>–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É –∏ –∑–∞–∫–∞–∂–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!</b>\n"
        "<code>+7(917)855-53-88</code>\n\n"
        "–°–∫–∏–¥–∫–∞ 10%\n"
        "–ü–æ–¥–∞—Ä–æ–∫\n"
    )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    markup = builder.as_markup()

    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "admin_back")
async def back_to_admin(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.edit_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext) -> None:
    role = await get_user_role(callback.from_user.id)
    is_registered = role is not None

    welcome_text = WELCOME_MESSAGE
    if role:
        welcome_text += f"\n\nüîπ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫: <b>{role}</b>"

    await callback.message.edit_text(
        welcome_text,
        reply_markup=get_main_keyboard(is_registered=is_registered),
        parse_mode="HTML"
    )
    await callback.answer()
    await state.clear()

# --- –ê–¥–º–∏–Ω: –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è ---
@dp.callback_query(F.data == "admin_registrations")
async def show_registrations(callback: CallbackQuery, state: FSMContext) -> None:
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    registrations = await get_all_registrations()
    if not registrations:
        text = "üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        text = "üë• <b>–ö—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        for r in registrations:
            phone = r['phone'] or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            word = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if r['session_count'] == 1 else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" if r['session_count'] in (2,3,4) else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
            text += (
                f"üë§ <b>{r['full_name']}</b>\n"
                f"üî¢ ID: <code>{r['user_id']}</code>\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {r['age']}\n"
                f"üéØ –†–æ–ª—å: {r['role']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {r['training_time']}\n"
                f"üéü –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {r['session_count']} {word}\n"
                f"üí∞ –¶–µ–Ω–∞: <b>{r['price']} ‚ÇΩ</b>\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üìÖ {r['registered_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
            )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    markup = builder.as_markup()

    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "open_shop")
async def open_shop(callback: CallbackQuery) -> None:
    shop_text = (
        "üõç <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏–π –ø–ª–∞–≤–∞–Ω–∏–µ–º:\n\n"
        "‚Ä¢ –ö—É–ø–∞–ª—å–Ω–∏–∫–∏ –∏ –≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º—ã\n"
        "‚Ä¢ –û—á–∫–∏ –¥–ª—è –ø–ª–∞–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –®–∞–ø–æ—á–∫–∏ –∏ –ª–∞—Å—Ç—ã\n"
        "‚Ä¢ –ù–æ—Å–∫–∏ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å—É–º–∫–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã\n\n"
        "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏ –∏ —É—á–µ–Ω–∏–∫–∞–º–∏.\n"
        "–ö–∞—á–µ—Å—Ç–≤–æ, –∫–æ–º—Ñ–æ—Ä—Ç –∏ —Å—Ç–∏–ª—å ‚Äî –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏!\n\n"
        "üëâ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏:"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", url="https://t.me/swimthings")
    builder.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(1)
    markup = builder.as_markup()

    await callback.message.edit_text(shop_text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()