from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import dp
from database.users import save_user, get_user_role
from keyboards.registration import get_role_keyboard
from keyboards.main_menu import get_main_keyboard
import logging

logger = logging.getLogger(__name__)

class RegistrationStates(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_age = State()
    waiting_for_role = State()
    waiting_for_phone = State()

@dp.callback_query(F.data == "start_registration")
async def start_registration(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ:")
    await state.set_state(RegistrationStates.waiting_for_full_name)
    await callback.answer()

@dp.message(F.text, RegistrationStates.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    if len(full_name.split()) < 2:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á).")
        return
    await state.update_data(full_name=full_name)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(RegistrationStates.waiting_for_age)

@dp.message(F.text, RegistrationStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    age_text = message.text.strip()
    if not age_text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return
    age = int(age_text)
    if age < 1 or age > 120:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1‚Äì120).")
        return
    await state.update_data(age=age)
    await message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=get_role_keyboard())
    await state.set_state(RegistrationStates.waiting_for_role)

@dp.callback_query(F.data.startswith("role_"), RegistrationStates.waiting_for_role)
async def process_role(callback: CallbackQuery, state: FSMContext):
    role = "–í–∑—Ä–æ—Å–ª—ã–π" if callback.data == "role_adult" else "–†–µ–±—ë–Ω–æ–∫"
    await state.update_data(role=role)
    await callback.message.edit_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(RegistrationStates.waiting_for_phone)
    await callback.answer()

@dp.message(F.text, RegistrationStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    digits = ''.join(filter(str.isdigit, phone))
    if len(digits) < 10:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    await state.update_data(phone=phone)
    data = await state.get_data()
    await save_user(
        user_id=message.from_user.id,
        full_name=data['full_name'],
        age=data['age'],
        role=data['role'],
        phone=phone
    )
    success_text = (
        f"üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
        f"üë§ <b>–§–ò–û:</b> {data['full_name']}\n"
        f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {data['age']}\n"
        f"üÜî <b>–†–æ–ª—å:</b> {data['role']}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É."
    )
    await message.answer(success_text, reply_markup=get_main_keyboard(is_registered=True), parse_mode="HTML")
    await state.clear()