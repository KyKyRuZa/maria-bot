from aiogram import F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from config import dp
from data.text_content import TRAINING_TIME_RU, TRAINING_SLOTS, SERVICE_TYPE_RU
from database.users import get_user_role
from database.prices import load_prices
from database.registrations import save_registration
from database.base import get_pool
from notifications import notify_admins_new_registration
from keyboards.training_selection import get_adult_pool_keyboard, get_child_pool_keyboard, get_adult_schedule_keyboard, get_child_schedule_keyboard

@dp.callback_query(F.data == "register_training")
async def choose_training(callback: CallbackQuery, state: FSMContext):
    role = await get_user_role(callback.from_user.id)
    if not role:
        await callback.message.edit_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await callback.answer()
        return
    if role == "–í–∑—Ä–æ—Å–ª—ã–π":
        text = "üèä‚Äç‚ôÇÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Å—Å–µ–π–Ω –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö</b>"
        keyboard = get_adult_pool_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        text = "üßí <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Å—Å–µ–π–Ω –¥–ª—è –¥–µ—Ç–µ–π</b>"
        keyboard = get_child_pool_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state("choosing_pool")
    await callback.answer()

@dp.callback_query(F.data.startswith("adult_pool_"))
async def choose_adult_pool(callback: CallbackQuery, state: FSMContext):
    pool_key = callback.data.replace("adult_pool_", "")
    await state.update_data(selected_pool=pool_key)
    keyboard = get_adult_schedule_keyboard(pool_key)
    pool_name = "–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π" if pool_key == "admiralteysky" else "–î–í–í–°"
    text = f"üèä‚Äç‚ôÇÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\nüìç –ë–∞—Å—Å–µ–π–Ω: {pool_name}"
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state("choosing_time")
    await callback.answer()

@dp.callback_query(F.data.startswith("pool_"))
async def choose_child_pool(callback: CallbackQuery, state: FSMContext):
    pool_key = callback.data.split("_", 1)[1]
    await state.update_data(selected_pool=pool_key)
    keyboard = get_child_schedule_keyboard(pool_key)
    text = f"üßí <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\nüìç –ë–∞—Å—Å–µ–π–Ω: {pool_key.upper()}"
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state("choosing_time")
    await callback.answer()

@dp.callback_query(F.data.in_(TRAINING_SLOTS))
async def show_price_options(callback: CallbackQuery, state: FSMContext):
    slot = callback.data
    time_text = TRAINING_TIME_RU.get(slot, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
    role = await get_user_role(callback.from_user.id)
    category = "adult" if role == "–í–∑—Ä–æ—Å–ª—ã–π" else "child"
    prices = await load_prices()
    prices = [p for p in prices if p['category'] == category]
    if not prices:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–π—Å.")
        return

    grouped = {}
    for p in prices:
        service_type = p['service_type']
        duration = p['duration'] or '45 –º–∏–Ω'
        key = f"{service_type}_{duration}"
        if key not in grouped:
            grouped[key] = {}
        grouped[key][p['session_count']] = p

    builder = InlineKeyboardBuilder()
    for key, items_dict in grouped.items():
        first_item = next(iter(items_dict.values()))
        service_ru = SERVICE_TYPE_RU.get(first_item['service_type'], first_item['service_type'])
        duration = first_item['duration'] or '45 –º–∏–Ω'
        builder.row(InlineKeyboardButton(text=f"üìå {service_ru} ({duration})", callback_data="header"))
        for session_count in sorted(items_dict.keys()):
            p = items_dict[session_count]
            word = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if p['session_count'] == 1 else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" if p['session_count'] in (2,3,4) else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
            builder.button(text=f"üéü {p['session_count']} {word} ‚Äî {p['price']} ‚ÇΩ", callback_data=f"price_{p['id']}")
        builder.adjust(1)
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="register_training"))
    await state.update_data(selected_time_slot=slot, selected_time_text=time_text)
    await callback.message.edit_text(
        f"üèä‚Äç‚ôÇÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç</b>\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {time_text}\n"
        f"üéØ <b>–†–æ–ª—å:</b> {role}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("price_"))
async def finalize_registration(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if 'selected_time_slot' not in data or 'selected_time_text' not in data:
        builder = InlineKeyboardBuilder()
        builder.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ —É—Ç–µ—Ä—è–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=builder.as_markup()
        )
        await state.clear()
        await callback.answer()
        return

    price_id = int(callback.data.split("_", 1)[1])
    slot = data['selected_time_slot']
    time_text = data['selected_time_text']
    user_id = callback.from_user.id
    role = data.get('role') or await get_user_role(user_id)
    pool = await get_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT full_name FROM users WHERE user_id = $1", user_id)
        price_row = await conn.fetchrow("SELECT * FROM prices WHERE id = $1", price_id)

    if not row or not price_row:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        await callback.answer()
        return

    full_name = row['full_name']
    session_count = price_row['session_count']
    price = price_row['price']

    await save_registration(user_id, full_name, role, time_text, session_count, price )

    registration_data = {
        'full_name': full_name,
        'training_time': time_text,
    }
    await notify_admins_new_registration(registration_data)

    word = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if session_count == 1 else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" if session_count in (2,3,4) else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
    price_text = f"{price:,} ‚ÇΩ".replace(",", " ")
    success_text = (
        "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!</b>\n"
        f"üë§ <b>–§–ò–û:</b> {full_name}\n"
        f"üéØ <b>–†–æ–ª—å:</b> {role}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {time_text}\n"
        f"üéü <b>–ê–±–æ–Ω–µ–º–µ–Ω—Ç:</b> {session_count} {word}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_text}\n"
        "üìû –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: +7 917 899 5088"
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    await callback.message.edit_text(success_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()
    await state.clear()

@dp.callback_query(F.data == "show_my_registrations")
async def show_my_registrations(callback: CallbackQuery):
    from database.registrations import get_user_registration
    from database.users import get_user_role
    from keyboards.main_menu import get_main_keyboard

    user_id = callback.from_user.id
    current_role = await get_user_role(user_id)
    if not current_role:
        await callback.message.edit_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=get_main_keyboard(is_registered=False))
        await callback.answer()
        return

    registration = await get_user_registration(user_id)
    if not registration:
        text = "üì≠ <b>–í—ã –ø–æ–∫–∞ –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã.</b>\n–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –∏ –∑–∞–Ω—è—Ç–∏–µ."
    else:
        time_text = registration['training_time']
        session_count = registration['session_count']
        price = registration['price']
        full_name = registration['full_name']
        word = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" if session_count == 1 else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" if session_count in (2,3,4) else "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
        price_text = f"{price:,} ‚ÇΩ".replace(",", " ")
        text = (
            "üìã <b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üë§ <b>–§–ò–û:</b> {full_name}\n"
            f"üéØ <b>–†–æ–ª—å:</b> {current_role}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {time_text}\n"
            f"üéü <b>–ê–±–æ–Ω–µ–º–µ–Ω—Ç:</b> {session_count} {word}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_text}\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üèä‚Äç‚ôÇÔ∏è"
        )
    builder = InlineKeyboardBuilder()
    builder.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()