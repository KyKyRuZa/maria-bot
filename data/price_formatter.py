from database.prices import load_prices

def _get_training_word(count: int) -> str:
    if count == 1:
        return "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
    elif count in (2, 3, 4):
        return "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
    else:
        return "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"

async def format_pricelist_for_adults() -> str:
    rows = await load_prices()
    prices = [r for r in rows if r['category'] == 'adult']
    text = "–ü—Ä–∞–π—Å –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö\n–í –≥—Ä—É–ø–ø–µ:\n"
    
    # –ì—Ä—É–ø–ø–æ–≤—ã–µ
    group = [p for p in prices if p['service_type'] == 'group']
    if group:
        unique = {p['session_count']: p for p in group}
        for count in sorted(unique.keys()):
            p = unique[count]
            word = _get_training_word(count)
            text += f"{count} {word} - {p['price']} —Ä—É–±\n"
        text += "\n"
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ
    text += "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è:\n"
    personal_45 = [p for p in prices if p['service_type'] == 'personal' and p['duration'] == '45 –º–∏–Ω']
    if personal_45:
        text += "45 –º–∏–Ω:\n"
        unique = {p['session_count']: p for p in personal_45}
        for count in sorted(unique.keys()):
            p = unique[count]
            word = _get_training_word(count)
            text += f"{count} {word} - {p['price']} —Ä—É–±\n"
        text += "\n"
    
    personal_30 = [p for p in prices if p['service_type'] == 'personal' and p['duration'] == '30 –º–∏–Ω']
    if personal_30:
        text += "30 –º–∏–Ω:\n"
        unique = {p['session_count']: p for p in personal_30}
        for count in sorted(unique.keys()):
            p = unique[count]
            word = _get_training_word(count)
            text += f"{count} {word} - {p['price']} —Ä—É–±\n"
        text += "\n"
    
    # –°–ø–ª–∏—Ç
    text += "–°–ø–ª–∏—Ç ‚Äì —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
    split_45 = [p for p in prices if p['service_type'] == 'split' and p['duration'] == '45 –º–∏–Ω']
    if split_45:
        text += "45 –º–∏–Ω:\n"
        unique = {p['session_count']: p for p in split_45}
        for count in sorted(unique.keys()):
            p = unique[count]
            word = _get_training_word(count)
            text += f"{count} {word} - {p['price']} —Ä—É–±\n"
        text += "\n"
    
    split_30 = [p for p in prices if p['service_type'] == 'split' and p['duration'] == '30 –º–∏–Ω']
    if split_30:
        text += "30 –º–∏–Ω:\n"
        unique = {p['session_count']: p for p in split_30}
        for count in sorted(unique.keys()):
            p = unique[count]
            word = _get_training_word(count)
            text += f"{count} {word} - {p['price']} —Ä—É–±\n"
        text += "\n"
    
    text += "üìû –ó–∞–ø–∏—Å—å –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: +7(917)-855-53-88"
    return text

async def format_pricelist_for_children() -> str:
    rows = await load_prices()
    prices = [r for r in rows if r['category'] == 'child']
    text = "–ü—Ä–∞–π—Å –¥–ª—è –¥–µ—Ç–µ–π\n"
    
    # –ì—Ä—É–ø–ø–æ–≤—ã–µ
    group = [p for p in prices if p['service_type'] == 'group']
    if group:
        text += "–ì–†–£–ü–ü–û–í–´–ï (10-12 —á–µ–ª–æ–≤–µ–∫) 45 –º–∏–Ω:\n"
        unique = {p['session_count']: p for p in group}
        for count in sorted(unique.keys()):
            p = unique[count]
            word = _get_training_word(count)
            text += f"{count} {word} - {p['price']} —Ä—É–±\n"
        text += "\n"
    
    # –ú–∏–Ω–∏-–≥—Ä—É–ø–ø—ã
    mini = [p for p in prices if p['service_type'] == 'mini_group']
    if mini:
        text += "–ú–∏–Ω–∏ –≥—Ä—É–ø–ø—ã (3-4 –ß–µ–ª):\n"
        text += "45 –º–∏–Ω:\n"
        unique = {p['session_count']: p for p in mini}
        for count in sorted(unique.keys()):
            p = unique[count]
            word = _get_training_word(count)
            text += f"{count} {word} - {p['price']} —Ä—É–±\n"
        text += "\n"
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ
    text += "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è:\n"
    personal_45 = [p for p in prices if p['service_type'] == 'personal' and p['duration'] == '45 –º–∏–Ω']
    if personal_45:
        text += "45 –º–∏–Ω:\n"
        unique = {p['session_count']: p for p in personal_45}
        for count in sorted(unique.keys()):
            p = unique[count]
            word = _get_training_word(count)
            text += f"{count} {word} - {p['price']} —Ä—É–±\n"
        text += "\n"
    
    personal_30 = [p for p in prices if p['service_type'] == 'personal' and p['duration'] == '30 –º–∏–Ω']
    if personal_30:
        text += "30 –º–∏–Ω:\n"
        unique = {p['session_count']: p for p in personal_30}
        for count in sorted(unique.keys()):
            p = unique[count]
            word = _get_training_word(count)
            text += f"{count} {word} - {p['price']} —Ä—É–±\n"
        text += "\n"
    
    # –°–ø–ª–∏—Ç
    text += "–°–ø–ª–∏—Ç ‚Äì —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
    split_45 = [p for p in prices if p['service_type'] == 'split' and p['duration'] == '45 –º–∏–Ω']
    if split_45:
        text += "45 –º–∏–Ω:\n"
        unique = {p['session_count']: p for p in split_45}
        for count in sorted(unique.keys()):
            p = unique[count]
            word = _get_training_word(count)
            text += f"{count} {word} - {p['price']} —Ä—É–±\n"
        text += "\n"
    
    split_30 = [p for p in prices if p['service_type'] == 'split' and p['duration'] == '30 –º–∏–Ω']
    if split_30:
        text += "30 –º–∏–Ω:\n"
        unique = {p['session_count']: p for p in split_30}
        for count in sorted(unique.keys()):
            p = unique[count]
            word = _get_training_word(count)
            text += f"{count} {word} - {p['price']} —Ä—É–±\n"
        text += "\n"
    
    text += "üìû –ó–∞–ø–∏—Å—å –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: +7(917)-855-53-88"
    return text